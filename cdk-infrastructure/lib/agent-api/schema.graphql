type LLm @aws_iam @aws_cognito_user_pools {
    id: String!
    name: String!
    model: String!
}

type ConversationEvent @aws_iam @aws_cognito_user_pools {
    id: String!
    timestamp: String!
    conversationId: ID!
    sender: String!
    event: EventMessage!
}

type EventMessage @aws_iam @aws_cognito_user_pools {
    message: String
    innerDialog: String
    actionRequested: String
    actionResult: String
}

input EventMessageInput @aws_cognito_user_pools {
    message: String
    innerDialog: String
    actionRequested: String
    actionResult: String
}

type Conversation @aws_cognito_user_pools {
    id: String!
    timestamp: String!
    agent: ID!
    events: [ConversationEvent!]
}

input NewConversation @aws_cognito_user_pools {
    agent: ID!
}

input NewAgentAction {
    conversationId: ID!
    sender: String!
    event: EventMessageInput!
}

input NewAgentMetadata {
    conversationId: ID!
    agentStartResponding: Boolean
    agentStopResponding: Boolean
    agentPartialMessage: String
}

type AgentMetadata @aws_iam @aws_cognito_user_pools {
    conversationId: ID!
    agentStartResponding: Boolean
    agentStopResponding: Boolean
    agentPartialMessage: String
}

input UserAction {
    message: String
    model: LLmInput!
    actionRequested: String
    actionResult: String
    modelParams: ModelParamsInput
    systemPrompt: String
    knowledgeBaseParams: KnowledgeBaseParamsInput
    variables: [VariableInput]
    agentPhase: AgentPhaseInput
    Iteration: IterationInput
    executePhase: Boolean
}

input VariableInput {
  name: String
  value: String
}

input KnowledgeBaseParamsInput {
  knowledgeBaseId: String
  useKnowledgeBase: Boolean
  numberOfResults: Int
}

input ModelParamsInput {
  temperature: Float
  top_p: Float
  max_gen_len: Int
}



input LLmInput {
    id: String!
    name: String!
    model: String!
}

type AgentPhase {
    name: String
    description: String
    instruccion: String
}

type Agent @aws_cognito_user_pools {
    id: ID!
    timestamp: String!
    precedence: Int!
    name: String!
    handlerLambda: String!
    systemPrompt: String!
    inputMaxToken: Int!
    modelParams: ModelParams
    knowledgeBaseParams: KnowledgeBaseParams
    phases: [AgentPhase]
}

type ModelParams {
    temperature: Float
    top_p: Float
    max_gen_len: Int
}

type KnowledgeBaseParams {
    knowledgeBaseId: String
    useKnowledgeBase: Boolean
    numberOfResults: Int
}

input NewAgent {
    name: String!
    handlerLambda: String!
    systemPrompt: String!
    inputMaxToken: Int!
    precedence: Int!
    modelParams: ModelParamsInput
    knowledgeBaseParams: KnowledgeBaseParamsInput
    phases: [AgentPhaseInput]
}

input AgentPhaseInput {
    name: String
    description: String
    instruccion: String
}

input UpdateAgentInput {
    name: String
    handlerLambda: String
    systemPrompt: String
    inputMaxToken: Int
    precedence: Int
    modelParams: ModelParamsInput
    knowledgeBaseParams: KnowledgeBaseParamsInput
    phases: [AgentPhaseInput]
}

input NewLLm {
    name: String!
    model: String!
}

input IterationInput {
    objetive: String
    name: String
    number: Int
    systemElements: [systemElementInput]
}

type Iteration {
    id: ID!
    objetive: String
    name: String
    number: Int
    systemElements: [systemElement]
}

type systemElement{
    name: String
    description: String
}

input systemElementInput{
    name: String
    description: String
}


type Query @aws_cognito_user_pools {
    getAgent(id: ID!): Agent!
    getIteration(id: ID!): Iteration!
    listIterations: [Iteration]!
    listAgents: [Agent]!
    getLLm(id: ID!): LLm!
    listLLms: [LLm]!
    getConversation(id: ID!): Conversation!
    listConversations: [Conversation]!
}

type Mutation {
    createAgent(config: NewAgent!): Agent! @aws_cognito_user_pools
    createIteration(config: IterationInput!): Iteration! @aws_cognito_user_pools
    deleteIteration(id: ID!): Iteration! @aws_cognito_user_pools
    updateIteration(id: ID!, config: IterationInput): Iteration! @aws_cognito_user_pools
    updateAgent(id: ID!, config: UpdateAgentInput!): Agent! @aws_cognito_user_pools
    deleteAgent(id: ID!): Agent! @aws_cognito_user_pools
    createConversation(config: NewConversation!): Conversation! @aws_cognito_user_pools
    deleteConversation(id: ID!): Conversation! @aws_cognito_user_pools
    createLLm(config: NewLLm!): LLm! @aws_cognito_user_pools
    deleteLLm(id: ID!): LLm! @aws_cognito_user_pools
    

    # User side operations
    userPublishMessage(conversationId: ID!, event: UserAction!): ConversationEvent! @aws_cognito_user_pools

    # Agent side operations
    agentPublishEvent(config: NewAgentAction!): ConversationEvent @aws_iam
    agentPublishMetadata(config: NewAgentMetadata!): AgentMetadata @aws_iam
}

type Subscription @aws_api_key {
    onConversationEvents(conversationId: ID!): ConversationEvent
        @aws_subscribe(mutations: ["agentPublishEvent"])
        @aws_cognito_user_pools
    onConversationMetadata(conversationId: ID!): AgentMetadata
        @aws_subscribe(mutations: ["agentPublishMetadata"])
        @aws_cognito_user_pools
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
